// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 
model User {
  actions Action[]
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  role    Role     @default(USER)
  posts   Post[]
  folders  Folder[] 
  profile Profile?
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  parentId  Int?     // Un dossier peut avoir un dossier parent (pour la structure hiérarchique)
  parent    Folder?  @relation("Parent45Folder", fields: [parentId], references: [id])
  children  Folder[] @relation("Parent45Folder") // Un dossier peut contenir plusieurs sous-dossiers
  files     File[]   // Un dossier peut contenir plusieurs fichiers
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  path      String   // Chemin du fichier
  folderId  Int
  folder    Folder   @relation(fields: [folderId], references: [id])  // Chaque fichier appartient à un dossier
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  published  Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   Int
  categories Category[]
  actions Action[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
  action Action?
}

enum Role {
  USER
  ADMIN
}

enum Action {
  GET
  CREATE
  UPDATE
  DELETE
}

